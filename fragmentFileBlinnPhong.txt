#version 400 core

struct Light {
    vec3 position;
    vec3 color;
    float intensity;
    float constant;
    float linear;
    float quadratic;
};

uniform int numLights;
uniform Light lights[10];
uniform vec3 viewPos;

in vec3 fragPos;
in vec3 fragNormal;

out vec4 FragColor;

void main() {
    vec3 ambient = vec3(0.1); 
    vec3 result = ambient; 

    vec3 viewDir = normalize(viewPos - fragPos); 

    for (int i = 0; i < numLights; ++i) {
        vec3 lightDir = normalize(lights[i].position - fragPos);
        float distance = length(lights[i].position - fragPos);

        vec3 N = normalize(fragNormal);
        float diff = max(dot(N, lightDir), 0.0);
        vec3 diffuse = lights[i].intensity * diff * lights[i].color;

        vec3 halfwayDir = normalize(lightDir + viewDir);
        float spec = pow(max(dot(N, halfwayDir), 0.0), 32.0); 
        vec3 specular = lights[i].intensity * spec * lights[i].color;

        float attenuation = 1.0 / (lights[i].constant + lights[i].linear * distance + lights[i].quadratic * (distance * distance));

        diffuse *= attenuation;
        specular *= attenuation;

        result += diffuse + specular;
    }

    FragColor = vec4(result, 1.0); 
}
